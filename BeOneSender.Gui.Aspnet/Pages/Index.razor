@page "/"
@using BeOneSender.Gui.Aspnet.Models
@using BeOneSender.Gui.Aspnet.Data
@inject IBootsTrapService BootStrapService
@inject IMusicSearchService MusicSearchService
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<style>
    tbody {
        cursor: pointer;
    }
    .filter-input {
       width: 181px;
       height: 30px;
    }
</style>

<div class="container">
    <div class="row mb-4">
        <h1 class="row">Sender Be1: Liste von Lieder</h1>
        <div class=" col-3">
            <a class="btn btn-primary" href="/media-edition">
                <span class="input" aria-hidden="true"></span> Add new media
            </a>
            <button class="btn btn-primary" @onclick="LoadDataIndoDatabase">
                <span class="input" aria-hidden="true"></span> Media Edition
            </button>
        </div>
    </div>

    <div class="row-cols-1">
        <div class="filter-container">
            <input type="text" @bind="FilterTitle" placeholder="Filter by Title"/>
            <input type="text" @bind="FilterArtist" placeholder="Filter by Artist"/>
            <select class="filter-input input" @bind="SelectedGenre">
                <option value="">All Genres</option>
                @foreach (var genre in Genres)
                {
                    <option value="@genre.GenreId.ToString()">@genre.Name</option>
                }
            </select>
        </div>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th scope="col">Song</th>
            <th scope="col">Artist</th>
            <th scope="col">Genre</th>
            <th scope="col">Path</th>
        </tr>
        </thead>
        <tbody>

       
        @foreach (var musicFile in _songsList.Songs)
        {
            var isEven = _index % 2 == 0;
            <tr class="@GetRowClass(isEven)" @onclick="() => EditMedia(musicFile.Id)">
                <td>@musicFile.Title</td>
                <td>@musicFile.Artist.Name</td>
                <td>@musicFile.Genre.Name</td>
                <td>@musicFile.Path</td>
            </tr>
            _index++;
        }

        </tbody>
    </table>

    <div class="d-flex justify-content-center">

        <div class="pagination">

           

            @if (CurrentPage > 1)
            {
                <button class="btn btn-link" @onclick="() => CurrentPage = 1">&lt;&lt;</button>
                <button class="btn btn-link" @onclick="() => CurrentPage--">&lt;</button>
            }

            @for (var page = 1; page <= TotalPages && page <= MaxPages; page++)
            {
                var page1 = page;
                <button class="btn btn-link @(page == CurrentPage ? "active" : "")" @onclick="() => CurrentPage = page1">@(page)</button>
            }

            @if (CurrentPage < TotalPages)
            {
                <button class="btn btn-link" @onclick="() => CurrentPage++">&gt;</button>
                <button class="btn btn-link" @onclick="() => CurrentPage = TotalPages">&gt;&gt;</button>
            }
        </div>
    </div>


</div>

@code {
    // Property declarations
    private int _index;
    private string _filterTitle = "";
    private string _filterArtist = "";
    private string _selectedGenre = "";
    private int _currentPage = 1;
    private int TotalPages { get; set; }
    private int MaxPages { get; } = 10;

    string GetRowClass(bool isEven)
    {
        return isEven ? "table-primary" : "table-secondary";
    }

    private int CurrentPage
    {
        get => _currentPage;
        set
        {
            if (_currentPage == value)
            {
                return;
            }

            _currentPage = value;
            StateHasChanged();
            LoadData().Wait();
        }
    }

    private string FilterTitle
    {
        get => _filterTitle;
        set
        {
            if (_filterTitle == value)
            {
                return;
            }

            _filterTitle = value;
            LoadData().Wait();
        }
    }

    private string FilterArtist
    {
        get => _filterArtist;
        set
        {
            if (_filterArtist == value)
            {
                return;
            }

            _filterArtist = value;
            LoadData().Wait();
        }
    }

    private string SelectedGenre
    {
        get => _selectedGenre;
        set
        {
            if (_selectedGenre == value)
            {
                return;
            }

            _selectedGenre = value;
            LoadData().Wait();
        }
    }

    readonly PaginationSongsViewModel _songsList = new();

    private List<GenreViewModel> Genres { get; set; } = new();

    private async Task<List<GenreViewModel>> GetGenres()
    {
        return await MusicSearchService.GetAllGenresAsync();
    }

    private async Task LoadData()
    {
        var result = await GetSongsWithFiltering();
        Genres = await GetGenres();
        _songsList.Songs = result.Songs;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task<PaginationSongsViewModel> GetSongsWithFiltering()
    {
        var pageSize = 10;
        var skip = pageSize * (CurrentPage - 1);
        var take = pageSize;
        _ = Guid.TryParse(_selectedGenre, out var fileId);

        var result = await MusicSearchService
            .GetAllSongsByPaginationAsyncAndQueryParameters(
                take,
                skip,
                _filterTitle,
                _filterArtist,
                fileId);
        TotalPages = (result.TotalSongs - 1) / 10 + 1;
        return result;
    }

    private async Task LoadDataIndoDatabase()
    {
        await BootStrapService.BootstrapAsync();
    }

    private void EditMedia(Guid musicFileId)
    {
        NavigationManager.NavigateTo($"media-edition?musicFileId={musicFileId}");
    }

}